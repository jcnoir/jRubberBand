package org.black.jtranscribe.generated.rubberband;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.TypedPointer;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>rubberband</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("rubberband") 
@Runtime(CRuntime.class) 
public class RubberbandLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:39</i>
	 */
	public enum RubberBandOption implements IntValuedEnum<RubberBandOption > {
		RubberBandOptionProcessOffline(0),
		RubberBandOptionProcessRealTime(1),
		RubberBandOptionStretchElastic(0),
		RubberBandOptionStretchPrecise(16),
		RubberBandOptionTransientsCrisp(0),
		RubberBandOptionTransientsMixed(256),
		RubberBandOptionTransientsSmooth(512),
		RubberBandOptionDetectorCompound(0),
		RubberBandOptionDetectorPercussive(1024),
		RubberBandOptionDetectorSoft(2048),
		RubberBandOptionPhaseLaminar(0),
		RubberBandOptionPhaseIndependent(8192),
		RubberBandOptionThreadingAuto(0),
		RubberBandOptionThreadingNever(65536),
		RubberBandOptionThreadingAlways(131072),
		RubberBandOptionWindowStandard(0),
		RubberBandOptionWindowShort(1048576),
		RubberBandOptionWindowLong(2097152),
		RubberBandOptionSmoothingOff(0),
		RubberBandOptionSmoothingOn(8388608),
		RubberBandOptionFormantShifted(0),
		RubberBandOptionFormantPreserved(16777216),
		RubberBandOptionPitchHighQuality(0),
		RubberBandOptionPitchHighSpeed(33554432),
		RubberBandOptionPitchHighConsistency(67108864),
		RubberBandOptionChannelsApart(0),
		RubberBandOptionChannelsTogether(268435456);
		RubberBandOption(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<RubberBandOption > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<RubberBandOption > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h</i>
	public static final int RUBBERBAND_API_MINOR_VERSION = (int)5;
	/// <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h</i>
	public static final int RUBBERBAND_API_MAJOR_VERSION = (int)2;
	/// <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h</i>
	public static final String RUBBERBAND_VERSION = (String)"1.7-gpl";
	/**
	 * Original signature : <code>RubberBandState rubberband_new(unsigned int, unsigned int, RubberBandOptions, double, double)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:85</i>
	 */
	public static native RubberbandLibrary.RubberBandState rubberband_new(int sampleRate, int channels, int options, double initialTimeRatio, double initialPitchScale);
	/**
	 * Original signature : <code>void rubberband_delete(RubberBandState)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:91</i>
	 */
	public static native void rubberband_delete(RubberbandLibrary.RubberBandState RubberBandState1);
	/**
	 * Original signature : <code>void rubberband_reset(RubberBandState)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:93</i>
	 */
	public static native void rubberband_reset(RubberbandLibrary.RubberBandState RubberBandState1);
	/**
	 * Original signature : <code>void rubberband_set_time_ratio(RubberBandState, double)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:95</i>
	 */
	public static native void rubberband_set_time_ratio(RubberbandLibrary.RubberBandState RubberBandState1, double ratio);
	/**
	 * Original signature : <code>void rubberband_set_pitch_scale(RubberBandState, double)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:96</i>
	 */
	public static native void rubberband_set_pitch_scale(RubberbandLibrary.RubberBandState RubberBandState1, double scale);
	/**
	 * Original signature : <code>double rubberband_get_time_ratio(const RubberBandState)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:98</i>
	 */
	public static native double rubberband_get_time_ratio(RubberbandLibrary.RubberBandState RubberBandState1);
	/**
	 * Original signature : <code>double rubberband_get_pitch_scale(const RubberBandState)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:99</i>
	 */
	public static native double rubberband_get_pitch_scale(RubberbandLibrary.RubberBandState RubberBandState1);
	/**
	 * Original signature : <code>int rubberband_get_latency(const RubberBandState)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:101</i>
	 */
	public static native int rubberband_get_latency(RubberbandLibrary.RubberBandState RubberBandState1);
	/**
	 * Original signature : <code>void rubberband_set_transients_option(RubberBandState, RubberBandOptions)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:103</i>
	 */
	public static native void rubberband_set_transients_option(RubberbandLibrary.RubberBandState RubberBandState1, int options);
	/**
	 * Original signature : <code>void rubberband_set_detector_option(RubberBandState, RubberBandOptions)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:104</i>
	 */
	public static native void rubberband_set_detector_option(RubberbandLibrary.RubberBandState RubberBandState1, int options);
	/**
	 * Original signature : <code>void rubberband_set_phase_option(RubberBandState, RubberBandOptions)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:105</i>
	 */
	public static native void rubberband_set_phase_option(RubberbandLibrary.RubberBandState RubberBandState1, int options);
	/**
	 * Original signature : <code>void rubberband_set_formant_option(RubberBandState, RubberBandOptions)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:106</i>
	 */
	public static native void rubberband_set_formant_option(RubberbandLibrary.RubberBandState RubberBandState1, int options);
	/**
	 * Original signature : <code>void rubberband_set_pitch_option(RubberBandState, RubberBandOptions)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:107</i>
	 */
	public static native void rubberband_set_pitch_option(RubberbandLibrary.RubberBandState RubberBandState1, int options);
	/**
	 * Original signature : <code>void rubberband_set_expected_input_duration(RubberBandState, unsigned int)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:109</i>
	 */
	public static native void rubberband_set_expected_input_duration(RubberbandLibrary.RubberBandState RubberBandState1, int samples);
	/**
	 * Original signature : <code>int rubberband_get_samples_required(const RubberBandState)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:111</i>
	 */
	public static native int rubberband_get_samples_required(RubberbandLibrary.RubberBandState RubberBandState1);
	/**
	 * Original signature : <code>void rubberband_set_max_process_size(RubberBandState, unsigned int)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:113</i>
	 */
	public static native void rubberband_set_max_process_size(RubberbandLibrary.RubberBandState RubberBandState1, int samples);
	/**
	 * Original signature : <code>void rubberband_set_key_frame_map(RubberBandState, unsigned int, unsigned int*, unsigned int*)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:114</i>
	 */
	public static native void rubberband_set_key_frame_map(RubberbandLibrary.RubberBandState RubberBandState1, int keyframecount, Pointer<Integer > from, Pointer<Integer > to);
	/**
	 * Original signature : <code>void rubberband_study(RubberBandState, const const float**, unsigned int, final int)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:116</i>
	 */
	public static native void rubberband_study(RubberbandLibrary.RubberBandState RubberBandState1, Pointer<Pointer<Float > > input, int samples, int int1);
	/**
	 * Original signature : <code>void rubberband_process(RubberBandState, const const float**, unsigned int, final int)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:117</i>
	 */
	public static native void rubberband_process(RubberbandLibrary.RubberBandState RubberBandState1, Pointer<Pointer<Float > > input, int samples, int int1);
	/**
	 * Original signature : <code>int rubberband_available(const RubberBandState)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:119</i>
	 */
	public static native int rubberband_available(RubberbandLibrary.RubberBandState RubberBandState1);
	/**
	 * Original signature : <code>int rubberband_retrieve(const RubberBandState, const float**, unsigned int)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:120</i>
	 */
	public static native int rubberband_retrieve(RubberbandLibrary.RubberBandState RubberBandState1, Pointer<Pointer<Float > > output, int samples);
	/**
	 * Original signature : <code>int rubberband_get_channel_count(const RubberBandState)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:122</i>
	 */
	public static native int rubberband_get_channel_count(RubberbandLibrary.RubberBandState RubberBandState1);
	/**
	 * Original signature : <code>void rubberband_calculate_stretch(RubberBandState)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:124</i>
	 */
	public static native void rubberband_calculate_stretch(RubberbandLibrary.RubberBandState RubberBandState1);
	/**
	 * Original signature : <code>void rubberband_set_debug_level(RubberBandState, int)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:126</i>
	 */
	public static native void rubberband_set_debug_level(RubberbandLibrary.RubberBandState RubberBandState1, int level);
	/**
	 * Original signature : <code>void rubberband_set_default_debug_level(int)</code><br>
	 * <i>native declaration : src/main/resources/headers/rubberband/rubberband-c.h:127</i>
	 */
	public static native void rubberband_set_default_debug_level(int level);
	public static class RubberBandState extends TypedPointer {
		public RubberBandState(long address) {
			super(address);
		}
		public RubberBandState(Pointer address) {
			super(address);
		}
	};
}
